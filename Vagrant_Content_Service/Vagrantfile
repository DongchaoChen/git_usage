# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  #config.vm.provider "docker" do |d|
  #  d.build_dir = "."
  #end

  # Setup a sync folder to the location of gradle.properties
  host = RbConfig::CONFIG['host_os']

  if "#{ENV['GRADLE_USER_HOME']}" == '' # GRADLE_USER_HOME not defined
    if host =~ /darwin/ || host =~ /linux/ # OS X or Linux
      gradle_folder = "#{ENV['HOME']}/.gradle"
    else # Windows
      gradle_folder = "#{ENV['HOMEDRIVE']}#{ENV['HOMEPATH']}\\.gradle"
    end
  else # GRADLE_USER_HOME defined
    if host =~ /darwin/ || host =~ /linux/ # OS X or Linux
      gradle_folder = "#{ENV['GRADLE_USER_HOME']}"
    else # Windows
      gradle_folder = "#{ENV['GRADLE_USER_HOME']}"
    end
  end

  config.vm.synced_folder gradle_folder, "/gradle_user_home"

  printf "The following gradle.properties file will be used: %s\n", "#{gradle_folder}/gradle.properties"

  # Parse the artifactory credentials from gradle.properties as we will need them to download the box file.
  File.open("#{gradle_folder}/gradle.properties").each do |line|
    if line =~ /^artifactory_user=(.*)$/
      ARTIFACTORY_USER = $1
    end
    if line =~ /^artifactory_password=(.*)$/
      ARTIFACTORY_PASSWORD = $1
    end
  end

  if ARTIFACTORY_USER == '' || ARTIFACTORY_PASSWORD == ''
    printf "Failed to parse artifactory credentials\n"
  else
    printf "successfully parsed artifactory credentials\n"
  end

  config.vm.box = "debian-jessie-virtualbox"
  config.vm.box_url = "https://#{ARTIFACTORY_USER}:#{ARTIFACTORY_PASSWORD}@qliktech.artifactoryonline.com/qliktech/qlik-vagrant/debian-jessie-virtualbox-1_0_1.box"

  # Provision
  config.vm.provision :shell, path: "vagrant/provision.sh"

  # Specifying these 2 provisioners results in docker and docker-compose being installed
  # in the VM.
  # config.vm.provision :docker
  # config.vm.provision :docker_compose

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080'

  # CASSANDRA_PORT
  config.vm.network "forwarded_port", guest: 9160, host: 9160, protocol: 'tcp', auto_correct: true
  config.vm.network "forwarded_port", guest: 9042, host: 9042, protocol: 'tcp', auto_correct: true

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.50.4"
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../", "/vagrant_parent"

  # Folder mapping for cassandra
  if host =~ /darwin/ || host =~ /linux/ # OS X or Linux
    # config.vm.synced_folder "/tmp/cassandra/", "/tmp/cassandra", type: "nfs", create: true, mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
    config.vm.synced_folder "/tmp/cassandra/", "/tmp/cassandra", create: true
  else # Windows
    # config.vm.synced_folder "C://temp//cassandra//", "/tmp/cassandra", type: "nfs", create: true, mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
    config.vm.synced_folder "C://temp//cassandra//", "/tmp/cassandra", create: true
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
      # Virtual Machine Settings
      vb.name = "content-service_default"
      vb.memory = 4096
      vb.cpus = 4
      # Fix docker not being able to resolve private registy in VirtualBox
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
